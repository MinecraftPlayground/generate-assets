name: 'Generate Assets'
description: 'Generate Minecraft default resourcepack assets.'
author: 'Mqxx'
branding:
  icon: 'folder'
  color: 'green'

inputs:
  version: 
    description: 'Minecraft version to generate assets for.'
    required: true

  path:
    description: 'Relative path under $GITHUB_WORKSPACE to place the assets.'
    required: false
    default: './default'

  api-url:
    description: 'URL to the Minecraft manifest API.'
    required: false
    default: 'https://piston-meta.mojang.com/mc/game/version_manifest_v2.json'
  
  resources-url:
    description: 'URL to the Minecraft resources API.'
    required: false
    default: 'https://resources.download.minecraft.net'

outputs:
  random-number:
    description: "Random number"
    value: ${{ steps.random-number-generator.outputs.random-number }}

runs:
  using: 'docker'
  image: 'docker://ubuntu:latest'
  steps:
    - name: 'Setup'
      id: 'setup'
      shell: 'bash'
      env:
        VERSION: ${{ inputs.version }}
        PATH: ${{ inputs.path }}
        MANIFEST_URL: ${{ inputs.api-url }}

      run: |
        echo "Make temp download directory."
        echo "TEMP_DOWNLOAD_DIR=$(mktemp -d)" >> "$GITHUB_OUTPUT"

        echo "Fetch package URL."
        package_url=$(curl -L $MANIFEST_URL | jq -r ".versions[] | select(.id == \"$VERSION\") | .url")
        echo "PACKAGE_URL=$package_url" >> "$GITHUB_OUTPUT"

    - name: 'Download client.jar'
      shell: 'bash'
      env:
        TEMP_DOWNLOAD_DIR: ${{ steps.setup.outputs.TEMP_DOWNLOAD_DIR }}
        PACKAGE_URL: ${{ steps.setup.outputs.PACKAGE_URL }}

      run: |
        echo "Fetch client.jar URL from \"$PACKAGE_URL\"."
        JAR_URL=$(curl -L $PACKAGE_URL | jq -r ".downloads.client.url")
        
        echo "Downloading client.jar from \"$JAR_URL\"."
        curl -L -o $TEMP_DOWNLOAD_DIR/client.jar $JAR_URL

        echo "Saved client.jar to \"$TEMP_DOWNLOAD_DIR\"."

    - name: 'Extract assets from client.jar'
      shell: 'bash'
      env:
        TEMP_DOWNLOAD_DIR: ${{ steps.setup.outputs.TEMP_DOWNLOAD_DIR }}

      run: |
        mkdir -p "$TEMP_DOWNLOAD_DIR/generated"
        
        unzip $TEMP_DOWNLOAD_DIR/client.jar "pack.png" -d "$TEMP_DOWNLOAD_DIR/generated"
        unzip $TEMP_DOWNLOAD_DIR/client.jar "assets/*" -d "$TEMP_DOWNLOAD_DIR/generated"

    - name: 'Download additional assets'
      shell: 'bash'
      env:
        TEMP_DOWNLOAD_DIR: ${{ steps.setup.outputs.TEMP_DOWNLOAD_DIR }}
        PACKAGE_URL: ${{ steps.setup.outputs.PACKAGE_URL }}
        RESOURCES_URL: ${{ inputs.resources-url }}

      run: |
        echo "Fetch asset index URL from \"$PACKAGE_URL\""
        asset_index_url=$(curl -L $PACKAGE_URL | jq -r ".assetIndex.url")
        
        assets_path=$(mkdir -p "$TEMP_DOWNLOAD_DIR/generated/assets")

        curl -L $asset_index_url | jq -r '.objects | to_entries[] | "\(.key) \(.value.hash)"' | while read -r path hash; do
          
          mkdir -p "$assets_path/$(dirname "$path")"
          
          first_hex="${hash:0:2}"

          url="$RESOURCES_URL/$first_hex/$hash"

          destination="$assets_path/$path"

          curl -s -o "$destination" "$url"

          echo "Saved \"$url\"" to \"$destination\"."
        done
    
    - name: 'List temp'
      shell: 'bash'
      env:
        TEMP_DOWNLOAD_DIR: ${{ steps.setup.outputs.TEMP_DOWNLOAD_DIR }}
      
      run: |
        ls -al $TEMP_DOWNLOAD_DIR
